#BlueJ class context
comment0.target=Asteroid
comment0.text=\r\n\ Asteroid\ class\ contains\ the\ core\ functionality\ of\ this\ game,\r\n\ which\ includes\ its\ realistic\ and\ accurate\ modelling\ of\ planetary\ motion.\r\n\ \r\n\ The\ equation\ itself\ was\ derived\ by\ using\ the\ Lagrangian\ (kinetic\ energy\ minus\ potential\ energy\r\n\ in\ a\ two-body\ system).\r\n\ \r\n\ Here\ is\ a\ really\ nice\ video\ on\ YouTube\ that\ explains\ why\ Lagrangian\ Mechanics\ is\ superior\ to\ its\r\n\ Newtonian\ Equivalent\ in\ some\ situations\:\r\n\ https\://www.youtube.com/watch?v\=KpLno70oYHE\r\n\ \r\n\ Newton's\ famous\ Universal\ Gravitational\ law\ (Gmm/r^2\ with\ the\ sign\ flipped\ to\ negative)\ \r\n\ was\ used\ to\ calculate\ the\ potential\ energy.\r\n\ \r\n\ CHECK\ OUT\ A\ VIDEO\ I\ FILMED\ ABOUT\ THIS\:\r\n\ https\://www.youtube.com/watch?v\=AnD9-1YCGdg\r\n\ \r\n\ Basic\ understanding\ of\ differential\ calculus\ was\ required\ to\ derive\ these\ equations,\ although\ they\ weren't\ \r\n\ particularly\ too\ hard,\ luckily\ enough.\ Was\ just\ perfect\ for\ me\ who\ has\ been\ taking\ Grade\ 12\ Calculus\ and\ Vectors\r\n\ and\ took\ the\ AP\ Calculus\ BC\ exam\ last\ year.\r\n\ \r\n\ However,\ that\ does\ not\ mean\ that\ this\ game\ does\ not\ involve\ complex\ University-level\ topics,\ such\ as\ the\ Euler-Lagrangian\ equation\ and\ its\ derivation.\r\n\ For\ that,\ I\ used\ the\ tutorial\:\ https\://evgenii.com/blog/earth-orbit-simulation/\r\n\ \r\n\ In\ this\ case,\ I\ used\ the\ numerical\ differentation\ method\ that\ I\ learned\ in\ AP\ Cal.\ (tangent\ approximation\ method\r\n\ or\ in\ other\ words\ the\ "Euler's\ method"\ of\ getting\ the\ derivative)\ to\ get\ the\ velocity\ from\ the\ position-time\ system.\r\n\ \r\n\ Last\ but\ not\ at\ least,\ the\ last\ AP\ Cal.\ knowledge\ that\ was\ useful\ was\ the\ polar\ coordinates.\r\n\ This\ actually\ appears\ in\ Sal\ Khan's\ Pre-Calculus\ course\ as\ well;\ it\ basically\ expresses\ the\ existing\ Cartesian\ coordinates\r\n\ in\ terms\ of\ the\ angle\ and\ the\ radius\ between\ the\ point\ and\ the\ origin\ (0,\ 0).\r\n\ \r\n\ All\ calculations\ were\ done\ in\ terms\ of\ polar\ coordinates\ and\ converted\ at\ the\ last\ minute\ upon\ splashing\ them\ onto\ canvas.\r\n\ This\ was\ done\ by\ utilizing\ Trigonmetry\ that\ I\ learned\ in\ Gr.\ 10\ and\ 11\ Math.\r\n\ \r\n\ \r\n\ @author\ John\ Seong\r\n\ @version\ 1.0\r\n
comment1.params=w\ c\ celestialCollider
comment1.target=Asteroid(Game,\ Celestial,\ Collider)
comment1.text=\r\n\ A\ constructor\ for\ the\ Asteroid\ class.\r\n\ It\ defines\ the\ image\ that\ represent\ this\ object,\r\n\ as\ well\ as\ setting\ the\ distance\ (radius)\ and\ the\ angle\ values\ to\ their\ intial\ states.\r\n\ \r\n\ @param\ w\ represents\ the\ Game\ instance,\ which\ is\ the\ currentWorld\r\n\ @param\ c\ represents\ the\ Celestial\ instance,\ which\ is\ Earth\ in\ the\ centre\ that\ exerts\ gravity\r\n\ \r\n\ @since\ 1.0\r\n
comment10.params=
comment10.target=void\ act()
comment10.text=\r\n\ This\ method\ runs\ every\ frame;\ essentially\ serving\ as\ the\ main\ program\ loop.\r\n\ It\ contains\ the\ logic\ that\ detects\ the\ collision,\ printing\ out\ the\ "YOU\ LOST"\ message\ if\ the\ asteroid\ is\ out\ of\ bounds.\r\n\ \r\n\ @since\ 1.0\r\n
comment2.params=lvls
comment2.target=void\ setLevelsInstance(Levels)
comment2.text=\r\n\ Sets\ the\ level\ instance\ variable.\r\n\ \r\n\ @param\ lvls\ the\ current\ Level\ instance\r\n\ \r\n\ @since\ 1.0\r\n
comment3.params=
comment3.target=void\ setToInitConditions()
comment3.text=\r\n\ Sets\ the\ instance\ variables\:\ distance\ and\ the\ angle\ to\ predefined\ initial\ states,\r\n\ except\ for\ the\ angular\ velocity\ which\ will\ be\ randomized\r\n\ \r\n\ @since\ 1.0\r\n
comment4.params=distance\ angleSecondDeriv\ massOfTheCelestialKg
comment4.target=double\ calculateDistanceAcceleration(double,\ double,\ double)
comment4.text=\r\n\ Calculates\ the\ acceleration\ based\ upon\ the\ distance\ value,\ by\ using\ the\ Universal\ Law\ of\ Gravitation\ and\ its\ derived\ motion\ equation.\r\n\ \r\n\ @param\ distance\ represents\ the\ distance\ between\ the\ asteroid\ and\ the\ Earth\ (radius\ in\ terms\ of\ polar\ coordinates)\r\n\ @param\ angleSecondDeriv\ the\ angular\ velocity\r\n\ @param\ massOfTheCelestialKg\ the\ mass\ of\ the\ Celestial\ object\r\n\ \r\n\ @return\ the\ acceleration\ calculated\ based\ upon\ the\ distance\ between\ the\ celestial\ and\ the\ asteroid\ (radius)\r\n\ \r\n\ @since\ 1.0\r\n
comment5.params=distanceSecondDeriv\ angleSecondDeriv\ distance
comment5.target=double\ calculateAngleAcceleration(double,\ double,\ double)
comment5.text=\r\n\ Computes\ the\ acceleration\ based\ upon\ the\ angular\ velocity\ and\ the\ distance\ velocity.\ Derived\ straight\ from\ the\ Euler-Lagrange\ Equation.\r\n\ \r\n\ @param\ distanceSecondDeriv\ the\ distance\ velocity\r\n\ @param\ angleSecondDeriv\ the\ angular\ velocity\r\n\ \r\n\ @return\ the\ angular\ acceleration\ (second\ time\ derivative)\r\n\ \r\n\ @since\ 1.0\r\n
comment6.params=currentValue\ deltaT\ derivative
comment6.target=double\ performEulersMethod(double,\ double,\ double)
comment6.text=\r\n\ Numerically\ calculates\ the\ next\ point's\ coordinates\ by\ predicting\ the\ next\ tangent\ line's\ slope\ based\ upon\ the\ current\ value.\r\n\ This\ is\ often\ referred\ to\ as\ the\ "tangent\ approx.\ method"\ in\ many\ Calculus\ textbooks\ as\ well.\ (e.g.\ Stewart's)\r\n\ \r\n\ @param\ currentValue\ represents\ the\ current\ location\ and\ its\ offset\ on\ the\ plane\r\n\ @param\ deltaT\ the\ current\ time\ value\:\ which\ will\ be\ the\ input,\ in\ this\ case\r\n\ @param\ derivative\ the\ current\ slope\ value\r\n\ \r\n\ @return\ the\ predicted\ y-value\ of\ the\ next\ point\ based\ upon\ the\ calculated\ instantaneous\ rate\ of\ change\r\n\ \r\n\ @since\ 1.0\r\n
comment7.params=massMultiplier
comment7.target=void\ changeSizeOfCelestial(double)
comment7.text=\r\n\ Manipulates\ the\ gravitational\ strength\ of\ the\ celestial\ by\ adding/removing\ mass\r\n\ \r\n\ @param\ massMultiplier\ the\ desired\ factor\ that\ will\ be\ multiplied\ to\ the\ current\ mass\ of\ the\ celestial\r\n\ \r\n\ @since\ 1.0\r\n
comment8.params=deltaT
comment8.target=void\ updatePosition(double)
comment8.text=\r\n\ Updated\ the\ position\ of\ the\ asteroid\ based\ upon\ the\ coordinates\ generated\ by\ the\ equations\r\n\ that\ are\ modelled\ after\ a\ real\ life\ phenomenon.\r\n\ \r\n\ @param\ deltaT\ the\ desired\ time\ interval\ between\ coordinate\ calculations\ that\ will\ be\ performed\r\n\ \r\n\ @since\ 1.0\r\n
comment9.params=distance\ angle
comment9.target=int[]\ getCartesianCoords(double,\ double)
comment9.text=\r\n\ Converts\ the\ polar\ coordinates\ into\ the\ cartesian\ equivalent.\r\n\ Essentially\ going\ from\ radius\ (distance)\ and\ angle\ to\ x\ and\ y-coordinates.\r\n\ \r\n\ @param\ distance\ the\ distance\ between\ the\ asteroid\ and\ the\ celestial,\ i.e.\ the\ radius\ in\ terms\ of\ polar\ coordinates\r\n\ @param\ angle\ the\ angle\ where\ the\ asteroid\ is\ located,\ given\ that\ the\ base\ point\ or\ origin\ is\ on\ the\ centre\ of\ the\ celestial\r\n\ \r\n\ @return\ the\ array\ that\ contains\ the\ converted\ x\ and\ y-coordinates\r\n\ \r\n\ @since\ 1.0\r\n
numComments=11
